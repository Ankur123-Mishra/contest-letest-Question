
Problem Statement
A ​ permutation is simply a name for a reordering. So the permutations of the string
‘abc’ are ‘abc’, ‘acb’, ‘bac’, ‘bca’, ‘cab’, and ‘cba’. Note that a sequence is a
permutation of itself (the trivial permutation). For this problem, you’ll need
to write a ​ recursive​ function ​​ that takes a string and returns a
list of all its permutations.
A couple of notes on the requirements:
1. The order of the returned permutations must be lexicographically.
2. Avoid returning duplicates in your final list.


Input
Input contains a single string S.


---------------------------------------------------------------------------------------------------
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
   public static void swap (char[] arr , int idx , int idx2){
       char temp = arr[idx];
       arr[idx] = arr[idx2];
       arr[idx2] = temp;
   }

   public static void swap(char [] arr , int idx){
       if(idx == arr.length-1){
           System.out.print(String.valueOf(arr)+" ");
       }

       for(int i = idx ; i< arr.length; i++){
           swap(arr , idx , i);
           solve(arr, idx+1);
           swap(arr , idx , i);
       }
   }

    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        
        if(str.length() == 0 || str == null){
            return;
        }
        solve(str.toCharArray() , 0);

    }
}
